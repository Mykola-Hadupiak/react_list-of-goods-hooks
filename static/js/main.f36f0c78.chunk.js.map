{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","goodsForRender","goods","visibleGoods","sort","prev","next","LENGTH","length","ALPHABET","localeCompare","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EA9BD,SACLC,EACAH,EACAH,GAEA,IAAMO,EAAY,YAAOD,GAkBzB,OAhBAC,EAAaC,MAAK,SAACC,EAAMC,GACvB,OAAQP,GACN,KAAKP,EAASe,OACZ,OAAOF,EAAKG,OAASF,EAAKE,OAC5B,KAAKhB,EAASiB,SACZ,OAAOJ,EAAKK,cAAcJ,GAE5B,QACE,OAAO,MAITV,GACFO,EAAaQ,UAGRR,EAOgBS,CACrBnB,EACAM,EACAH,GAcF,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SAAU,UACV,CAAE,WAAYhB,IAAaP,EAASiB,WAEtCO,QAbe,kBAAMhB,EAAYR,EAASiB,WAO5C,iCAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,WAAYhB,IAAaP,EAASe,SAEtCS,QAtBa,kBAAMhB,EAAYR,EAASe,SAgB1C,4BAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,SAAU,aACV,CAAE,YAAanB,IAEjBoB,QArCQ,kBAAMnB,GAAeD,IA+B/B,sBAWEA,GAAcG,IAAaP,EAASM,OAEpC,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QApDI,WACZnB,GAAc,GACdG,EAAYR,EAASM,OA+Cf,sBAUJ,6BACGG,EAAegB,KAAI,SAAAC,GAClB,OACE,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCvHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f36f0c78.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((prev, next) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return prev.length - next.length;\n      case SortType.ALPHABET:\n        return prev.localeCompare(next);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const goodsForRender = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const reverse = () => setIsReversed(!isReversed);\n\n  const sortByAlphabet = () => setSortType(SortType.ALPHABET);\n\n  const sortByLength = () => setSortType(SortType.LENGTH);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE)\n        && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goodsForRender.map(good => {\n          return (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}